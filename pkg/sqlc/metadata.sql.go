// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: metadata.sql

package sqlc

import (
	"context"
)

const readMetadataPublic = `-- name: ReadMetadataPublic :one
SELECT public_path
FROM metadata
`

func (q *Queries) ReadMetadataPublic(ctx context.Context) (string, error) {
	row := q.db.QueryRowContext(ctx, readMetadataPublic)
	var public_path string
	err := row.Scan(&public_path)
	return public_path, err
}

const readMetadataTemplates = `-- name: ReadMetadataTemplates :one
SELECT templates_path
FROM metadata
`

func (q *Queries) ReadMetadataTemplates(ctx context.Context) (string, error) {
	row := q.db.QueryRowContext(ctx, readMetadataTemplates)
	var templates_path string
	err := row.Scan(&templates_path)
	return templates_path, err
}

const updateMetadataPublic = `-- name: UpdateMetadataPublic :exec
UPDATE metadata
SET public_path = ?
`

func (q *Queries) UpdateMetadataPublic(ctx context.Context, publicPath string) error {
	_, err := q.db.ExecContext(ctx, updateMetadataPublic, publicPath)
	return err
}

const updateMetadataTemplates = `-- name: UpdateMetadataTemplates :exec
UPDATE metadata
SET templates_path = ?
`

func (q *Queries) UpdateMetadataTemplates(ctx context.Context, templatesPath string) error {
	_, err := q.db.ExecContext(ctx, updateMetadataTemplates, templatesPath)
	return err
}
