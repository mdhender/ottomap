// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: clans.sql

package sqlc

import (
	"context"
	"time"
)

const createClan = `-- name: CreateClan :exec
INSERT INTO clans (cid, uid)
VALUES (?1, ?2)
`

type CreateClanParams struct {
	Cid string
	Uid string
}

func (q *Queries) CreateClan(ctx context.Context, arg CreateClanParams) error {
	_, err := q.db.ExecContext(ctx, createClan, arg.Cid, arg.Uid)
	return err
}

const readAllClanReports = `-- name: ReadAllClanReports :many
SELECT rid, tid, cid, crdttm
FROM reports
WHERE cid = ?1
`

type ReadAllClanReportsRow struct {
	Rid    string
	Tid    string
	Cid    string
	Crdttm time.Time
}

func (q *Queries) ReadAllClanReports(ctx context.Context, cid string) ([]ReadAllClanReportsRow, error) {
	rows, err := q.db.QueryContext(ctx, readAllClanReports, cid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ReadAllClanReportsRow
	for rows.Next() {
		var i ReadAllClanReportsRow
		if err := rows.Scan(
			&i.Rid,
			&i.Tid,
			&i.Cid,
			&i.Crdttm,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const readAllTurns = `-- name: ReadAllTurns :many
SELECT tid, turn, year, month, crdttm
FROM turns
`

func (q *Queries) ReadAllTurns(ctx context.Context) ([]Turn, error) {
	rows, err := q.db.QueryContext(ctx, readAllTurns)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Turn
	for rows.Next() {
		var i Turn
		if err := rows.Scan(
			&i.Tid,
			&i.Turn,
			&i.Year,
			&i.Month,
			&i.Crdttm,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const readUserClan = `-- name: ReadUserClan :one
SELECT cid
FROM clans
WHERE uid = ?1
`

func (q *Queries) ReadUserClan(ctx context.Context, uid string) (string, error) {
	row := q.db.QueryRowContext(ctx, readUserClan, uid)
	var cid string
	err := row.Scan(&cid)
	return cid, err
}
