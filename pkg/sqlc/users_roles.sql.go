// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: users_roles.sql

package sqlc

import (
	"context"
)

const createUserRole = `-- name: CreateUserRole :exec
INSERT INTO users_roles (uid, rlid, value)
VALUES (?1, ?2, ?3)
ON CONFLICT (uid, rlid) DO UPDATE SET value = ?3
`

type CreateUserRoleParams struct {
	Uid   string
	Rlid  string
	Value string
}

func (q *Queries) CreateUserRole(ctx context.Context, arg CreateUserRoleParams) error {
	_, err := q.db.ExecContext(ctx, createUserRole, arg.Uid, arg.Rlid, arg.Value)
	return err
}

const deleteUserRole = `-- name: DeleteUserRole :exec
DELETE
FROM users_roles
WHERE uid = ?
  AND rlid = ?
`

type DeleteUserRoleParams struct {
	Uid  string
	Rlid string
}

func (q *Queries) DeleteUserRole(ctx context.Context, arg DeleteUserRoleParams) error {
	_, err := q.db.ExecContext(ctx, deleteUserRole, arg.Uid, arg.Rlid)
	return err
}

const deleteUserRoles = `-- name: DeleteUserRoles :exec
DELETE
FROM users_roles
WHERE uid = ?
`

func (q *Queries) DeleteUserRoles(ctx context.Context, uid string) error {
	_, err := q.db.ExecContext(ctx, deleteUserRoles, uid)
	return err
}

const readUserRole = `-- name: ReadUserRole :one
SELECT value
FROM users_roles
WHERE uid = ?
  AND rlid = ?
`

type ReadUserRoleParams struct {
	Uid  string
	Rlid string
}

func (q *Queries) ReadUserRole(ctx context.Context, arg ReadUserRoleParams) (string, error) {
	row := q.db.QueryRowContext(ctx, readUserRole, arg.Uid, arg.Rlid)
	var value string
	err := row.Scan(&value)
	return value, err
}

const readUserRoles = `-- name: ReadUserRoles :many
SELECT rlid, value
FROM users_roles
WHERE uid = ?
`

type ReadUserRolesRow struct {
	Rlid  string
	Value string
}

func (q *Queries) ReadUserRoles(ctx context.Context, uid string) ([]ReadUserRolesRow, error) {
	rows, err := q.db.QueryContext(ctx, readUserRoles, uid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ReadUserRolesRow
	for rows.Next() {
		var i ReadUserRolesRow
		if err := rows.Scan(&i.Rlid, &i.Value); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserRole = `-- name: UpdateUserRole :exec
UPDATE users_roles
SET value = ?
WHERE uid = ?
  AND rlid = ?
`

type UpdateUserRoleParams struct {
	Value string
	Uid   string
	Rlid  string
}

func (q *Queries) UpdateUserRole(ctx context.Context, arg UpdateUserRoleParams) error {
	_, err := q.db.ExecContext(ctx, updateUserRole, arg.Value, arg.Uid, arg.Rlid)
	return err
}
