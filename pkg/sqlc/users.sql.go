// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: users.sql

package sqlc

import (
	"context"
)

const createUser = `-- name: CreateUser :exec
INSERT INTO users (uid, username, email, hashed_password)
VALUES (?, ?, ?, ?)
`

type CreateUserParams struct {
	Uid            string
	Username       string
	Email          string
	HashedPassword string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.ExecContext(ctx, createUser,
		arg.Uid,
		arg.Username,
		arg.Email,
		arg.HashedPassword,
	)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE
FROM users
WHERE uid = ?
`

func (q *Queries) DeleteUser(ctx context.Context, uid string) error {
	_, err := q.db.ExecContext(ctx, deleteUser, uid)
	return err
}

const readUser = `-- name: ReadUser :one
SELECT username, email
FROM users
WHERE uid = ?
`

type ReadUserRow struct {
	Username string
	Email    string
}

func (q *Queries) ReadUser(ctx context.Context, uid string) (ReadUserRow, error) {
	row := q.db.QueryRowContext(ctx, readUser, uid)
	var i ReadUserRow
	err := row.Scan(&i.Username, &i.Email)
	return i, err
}

const readUserAuthData = `-- name: ReadUserAuthData :one
SELECT uid, hashed_password
FROM users
WHERE username = ?
`

type ReadUserAuthDataRow struct {
	Uid            string
	HashedPassword string
}

func (q *Queries) ReadUserAuthData(ctx context.Context, username string) (ReadUserAuthDataRow, error) {
	row := q.db.QueryRowContext(ctx, readUserAuthData, username)
	var i ReadUserAuthDataRow
	err := row.Scan(&i.Uid, &i.HashedPassword)
	return i, err
}

const readUserByEmail = `-- name: ReadUserByEmail :one
SELECT username
FROM users
WHERE email = ?
`

func (q *Queries) ReadUserByEmail(ctx context.Context, email string) (string, error) {
	row := q.db.QueryRowContext(ctx, readUserByEmail, email)
	var username string
	err := row.Scan(&username)
	return username, err
}

const readUsers = `-- name: ReadUsers :many
SELECT users.uid, username, email
FROM users
WHERE users.uid = ?
ORDER BY username
`

type ReadUsersRow struct {
	Uid      string
	Username string
	Email    string
}

func (q *Queries) ReadUsers(ctx context.Context, uid string) ([]ReadUsersRow, error) {
	rows, err := q.db.QueryContext(ctx, readUsers, uid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ReadUsersRow
	for rows.Next() {
		var i ReadUsersRow
		if err := rows.Scan(&i.Uid, &i.Username, &i.Email); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
