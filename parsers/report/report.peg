{
// Package report implements a Pigeon parser for turn reports.
package report

import (
    "bytes"
    "github.com/mdhender/ottomap/domain"
    "github.com/mdhender/ottomap/directions"
    "strconv"
    "strings"
)

type TribeLocation struct {
    UnitId string
    Prev   string
    Curr   string
}

type StatusFound struct {
    Edge       *edge
    UnitId     string
    Settlement string
}

type edge struct {
    Direction directions.Direction
    Edge      domain.Edge
    Terrain   domain.Terrain
}

type Date struct {
    Year  int
    Month int
    Day   int
}

type Status struct {
    UnitId  string
    Terrain domain.Terrain
    Found   []*StatusFound
}

func toAnySlice(v any) []any {
    if v == nil {
        return nil
    }
    return v.([]any)
}

}

Line <- tl:TribeLocation EOF {
    log.Printf("line: tl %T\n", tl)
    return tl, nil
} / ti:TurnInfo EOF {
    log.Printf("line: ti %T\n", ti)
    return ti, nil
} / st:StatusLine EOF {
    log.Printf("line: st %T\n", st)
    return st, nil
}

TribeLocation <- "Tribe" _ u:UNIT_ID "," _ "," _ "Current Hex =" _ ch:COORDS "," _ "(Previous Hex =" _ ph:COORDS ")" EOF {
    return &TribeLocation {
        UnitId:  u.(string),
        Prev:    ph.(string),
        Curr:    ch.(string),
    }, nil
}

TurnInfo <- "Current Turn" _ date:YearMonth _ .* {
    return date, nil
}

YearMonth <- y:YEAR "-" m:MONTH {
    return &Date {
        Year:  y.(int),
        Month: m.(int),
    }, nil
}

StatusLine <- u:UNIT_ID _ "Status:" _ t:TERRAIN osfi:optStatusFound* EOF {
    log.Printf("status: t     %T\n", t)
    log.Printf("status: osfi  %T\n", osfi)
    st := &Status {
        UnitId:  u.(string),
        Terrain: t.(domain.Terrain),
    }
    for _, osf := range toAnySlice(osfi) {
        log.Printf("status: osf   %T\n", osf)
        switch v := osf.(type) {
        case *StatusFound:
            st.Found = append(st.Found, v)
        default:
            panic(fmt.Errorf("status: osfi: unknown type %T", v))
        }
    }
    return st, nil
}

StatusFound <- u:UNIT_ID {
    return &StatusFound{UnitId: u.(string)}, nil
}

optStatusFound <- _ "," _ sf:StatusFound {
    return sf, nil
}


COORDS <- "N/A" {
    return "", nil
} / ("##" / (LETTER LETTER)) SP DIGIT DIGIT DIGIT DIGIT {
    return string(c.text), nil
}

DIRECTION <- "NE" {
    return directions.DNorthEast, nil
} / "SE" {
    return directions.DSouthEast, nil
} / "SW" {
    return directions.DSouthWest, nil
} / "NW" {
    return directions.DNorthWest, nil
} / "N" {
    return directions.DNorth, nil
} / "S" {
    return directions.DSouth, nil
}

MONTH <- DIGIT DIGIT {
    month, _ := strconv.Atoi(string(c.text))
    return int(month), nil
}

TERRAIN <- "ARID TUNDRA" {
    return domain.TAridTundra, nil
} / "CONIFER HILLS" {
    return domain.TConiferHills, nil
} / "DESERT" {
    return domain.TDesert, nil
} / "GRASSY HILLS" {
    return domain.TGrassyHills, nil
} / "PRAIRIE" {
    return domain.TPrairie, nil
} / "ROCKY HILLS" {
    return domain.TRockyHills, nil
} / "SWAMP" {
    return domain.TSwamp, nil
} / "LAKE" {
    return domain.TLake, nil
} / "OCEAN" {
    return domain.TOcean, nil
} / "AR" {
    return domain.TConiferHills, nil
} / "CH" {
    return domain.TConiferHills, nil
} / "DE" {
    return domain.TDesert, nil
} / "GH" {
    return domain.TGrassyHills, nil
} / "PR" {
    return domain.TPrairie, nil
} / "RH" {
    return domain.TRockyHills, nil
} / "SW" {
    return domain.TSwamp, nil
} / "L" {
    return domain.TLake, nil
} / "O" {
    return domain.TOcean, nil
}

UNIT_ID <- DIGIT DIGIT DIGIT DIGIT ([cefg] DIGIT)? {
    return string(c.text), nil
}

YEAR <- DIGIT DIGIT DIGIT {
    year, _ := strconv.Atoi(string(c.text))
    return int(year), nil
}

EOF <- !.
DIGIT = [0-9]
LETTER = [A-Z]
SP = " "
_ = [ \t]*