{
// Package movements implements a Pigeon parser for unit movements.
package movements

// I'm not happy with the abstraction here, but...
//
// Movement captures a series of "wants" and "results."
// The unit wants to move N and here are the results.
//
// Step is one piece of that movement. It captures the hex where
// the unit started (From), the direction, and the result (where
// the unit ended up (which could be where it started!), reasons
// why the step failed (it was blocked by an edge feature, it was
// blocked by the destination's terrain (water or mountains?), or
// didn't have enough movement points. Maybe even something like
// wagons can't enter a swamp hex. If the step failed because of a
// lack of movement points, we'll usually be told what the terrain
// type of the would-be destination hex it. If the step succeeded,
// we'll be told the terrain type and (usually) details about the
// edges, too. I don't think that occupants are mentioned when
// moving; that's reserved for scouting.

// STEPS is STEP (SPACE SPACE?)? BACKSLASH STEP)*
// STEP  is DIRECTION DASH TERRAIN STUFF
// STUFF is OCEAN_EDGES? RIVER_EDGES? FORD_EDGES? SETTLEMENT?
// OCEAN_EDGES is COMMA SPACE SPACE     OCEAN SPACE DIRECTION ((SPACE SPACE?) DIRECTION)*
// RIVER_EDGES is COMMA (SPACE SPACE?)? RIVER SPACE DIRECTION (SPACE DIRECTION)*
// FORD_EDGES  is COMMA SPACE           FORD  SPACE DIRECTION (SPACE DIRECTION)*
// SETTLEMENT  is COMMA SPACE SPACE     SETTLEMENT_NAME

import (
    "fmt"
    "github.com/mdhender/ottomap/domain"
    "log"
    "strings"
)

type stepSucceeded struct {
	Direction  domain.Direction
	Found struct {
        Terrain    domain.Terrain
        Edges struct {
            Ford  []domain.Direction
            Lake  []domain.Direction
            Ocean []domain.Direction
            River []domain.Direction
        }
	    Settlement string
    }
}

type stepBlocked struct {
	Direction domain.Direction
    BlockedBy domain.Terrain
}

type stepExhaustedMP struct {
    Direction domain.Direction
    Terrain   domain.Terrain
}

type fordEdges []domain.Direction
type lakeEdges []domain.Direction
type oceanEdges []domain.Direction
type riverEdges []domain.Direction

func toAnySlice(v any) []any {
    if v == nil {
        return nil
    }
    return v.([]any)
}

}

Step <- d:DIRECTION_CODE "-" t:TERRAIN_CODE _ edges:Edges* _ si:Settlement? _ ("," _)* EOF {
    var step stepSucceeded
    step.Direction     = d.(domain.Direction)
    step.Found.Terrain = t.(domain.Terrain)

    for _, edge := range toAnySlice(edges) {
        if edge != nil {
            switch val := edge.(type) {
            case fordEdges:
                for _, v := range val {
                    step.Found.Edges.Ford = append(step.Found.Edges.Ford, v)
                }
            case oceanEdges:
                for _, v := range val {
                    step.Found.Edges.Ocean = append(step.Found.Edges.Ocean, v)
                }
            case riverEdges:
                for _, v := range val {
                    step.Found.Edges.River = append(step.Found.Edges.River, v)
                }
            default:
                panic(fmt.Errorf("step: edges: unknown type %T", val))
            }
        }
    }

    if si != nil {
        step.Found.Settlement = si.(string)
    }

    return &step, nil
} / "Can't Move on Ocean to " _ d:DIRECTION_CODE _ "of HEX" _ EOF {
    var step stepBlocked
    step.Direction = d.(domain.Direction)
    step.BlockedBy = domain.TOcean
    return &step, nil
} / "Not enough M.P's to move to " _ d:DIRECTION_CODE _ "into" _ t:TERRAIN_LONG _ EOF {
    var step stepExhaustedMP
    step.Direction = d.(domain.Direction)
    step.Terrain = domain.TOcean
    return &step, nil
}

DIRECTION_CODE <- ("NE" / "SE" / "SW" / "NW" / "N" / "S") {
    switch string(c.text) {
    case "N" : return domain.DNorth, nil
    case "NE": return domain.DNorthEast, nil
    case "SE": return domain.DSouthEast, nil
    case "S" : return domain.DSouth, nil
    case "SW": return domain.DSouthWest, nil
    case "NW": return domain.DNorthWest, nil
    }
    panic(fmt.Sprintf("assert(code != %q)", string(c.text)))
}

TERRAIN_CODE <- (
    "CH" / "GH" / "PR" / "RH" / "SW" /
    "L" / "O"
) {
    switch string(c.text) {
    case "CH":
        return domain.TConiferHills, nil
    case "GH":
        return domain.TGrassyHills, nil
    case "L":
        return domain.TLake, nil
    case "O":
        return domain.TOcean, nil
    case "PR":
        return domain.TPrairie, nil
    case "RH":
        return domain.TRockyHills, nil
    case "SW":
        return domain.TSwamp, nil
    }
    panic(fmt.Sprintf("assert(code != %q)", string(c.text)))
}

Edges <- "," _ "Ford" _ d:DIRECTION_CODE dli:optSpaceDirection* {
    var edges fordEdges
    edges = append(edges, d.(domain.Direction))
    for _, dir := range toAnySlice(dli) {
        if dir != nil {
            switch v := dir.(type) {
            case domain.Direction:
                edges = append(edges, v)
            default:
                panic(fmt.Sprintf("assert(type != %T)", v))
            }
        }
    }
    return edges, nil
} / "," _ "O" _ d:DIRECTION_CODE dli:optCommaDirection* {
    var edges oceanEdges
    edges = append(edges, d.(domain.Direction))
    for _, dir := range toAnySlice(dli) {
        if dir != nil {
            switch v := dir.(type) {
            case domain.Direction:
                edges = append(edges, v)
            default:
                panic(fmt.Sprintf("assert(type != %T)", v))
            }
        }
    }
    return edges, nil
} / "," _ "River" _ d:DIRECTION_CODE dli:optSpaceDirection* {
    var edges riverEdges
    edges = append(edges, d.(domain.Direction))
    for _, dir := range toAnySlice(dli) {
        if dir != nil {
            switch v := dir.(type) {
            case domain.Direction:
                edges = append(edges, v)
            default:
                panic(fmt.Sprintf("assert(type != %T)", v))
            }
        }
    }
    return edges, nil
}

optCommaDirection <- _ "," _ d:DIRECTION_CODE {
    return d.(domain.Direction), nil
}

optSpaceDirection <- _ d:DIRECTION_CODE {
    return d.(domain.Direction), nil
}

Settlement <- "," _ n:SettlementName {
    return n.(string), nil
}

SettlementName <- [A-Z][A-Za-z]+ {
    return string(c.text), nil
}

TERRAIN_LONG <-    (
    "CONIFER HILLS" / "GRASSY HILLS" / "LAKE"  / "OCEAN" /
    "PRAIRIE"       / "ROCKY HILLS"  / "SWAMP"
) {
    s := string(c.text)
    switch s {
    case "CONIFER HILLS":
        return domain.TConiferHills, nil
    case "GRASSY HILLS":
        return domain.TGrassyHills, nil
    case "LAKE":
        return domain.TLake, nil
    case "OCEAN":
        return domain.TOcean, nil
    case "PRAIRIE":
        return domain.TPrairie, nil
    case "ROCKY HILLS":
        return domain.TRockyHills, nil
    case "SWAMP":
        return domain.TSwamp, nil
    default:
        return string(c.text), fmt.Errorf("unknown terrain")
    }
}

EOF <- !.
DIGIT = [0-9]
SP = " "
_ = [ \t]*