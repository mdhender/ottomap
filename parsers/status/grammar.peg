{
package status

import (
	"log"
	"strconv"
	"strings"

	"github.com/mdhender/ottomap/directions"
	"github.com/mdhender/ottomap/domain"
)

type Edge struct {
    Direction directions.Direction
    Edge      domain.Edge
    Terrain   domain.Terrain
}

type Found struct {
    Edge       *Edge
    UnitId     string
}

type Hex struct {
    Terrain     domain.Terrain
    Resource    domain.Resource
    Settlements []*Settlement
    Found       []*Found
}

type Settlement struct {
    Name string
}

func toAnySlice(v any) []any {
    if v == nil {
        return nil
    }
    return v.([]any)
}

}

Line <- UNIT_ID _ "Status:" _ t:TERRAIN eli:optEntry* _ EOF {
    h := &Hex {
        Terrain: t.(domain.Terrain),
    }
    for _, ei := range toAnySlice(eli) {
        switch v := ei.(type) {
        case []*Edge:
            for _, e := range v {
                h.Found = append(h.Found, &Found{Edge: e})
            }
        case *Found:
            h.Found = append(h.Found, v)
        case *Settlement:
            h.Settlements = append(h.Settlements, v)
        case domain.Resource:
            h.Resource = v
        default:
            panic(fmt.Errorf("unexpected type %T", v))
        }
    }
    return h, nil
}

optEntry <- _ "," _ e:Entry {
    return e, nil
}

Entry <- uid:UNIT_ID {
    return &Found{UnitId: uid.(string)}, nil
} / fe:FordEdges {
    return fe, nil
} / oe:OceanEdges {
    return oe, nil
} / pe:PassEdges {
    return pe, nil
} / re:RiverEdges {
    return re, nil
} / r:Resource {
    return r, nil
} / s:Settlement {
    return s, nil
}

FordEdges <- "Ford" SP+ d:DIRECTION edi:SpaceDirection* {
    kind := domain.EFord
    edges := []*Edge{&Edge{Direction: d.(directions.Direction), Edge: kind}}
    for _, ed := range toAnySlice(edi) {
        switch v := ed.(type) {
        case directions.Direction:
            edges = append(edges, &Edge{Direction: v, Edge: kind})
        default:
            panic(fmt.Errorf("unexpected type %T", v))
        }
    }
    return edges, nil
}

OceanEdges <- "O" SP+ d:DIRECTION cdi:CommaDirection* {
    edges := []*Edge{&Edge{Direction: d.(directions.Direction), Terrain: domain.TOcean}}
    for _, di := range toAnySlice(cdi) {
        switch v := di.(type) {
        case directions.Direction:
            edges = append(edges, &Edge{Direction: v, Terrain: domain.TOcean})
        default:
            panic(fmt.Errorf("unexpected type %T", v))
        }
    }
    return edges, nil
}

PassEdges <- "Pass" SP+ d:DIRECTION edi:SpaceDirection* {
    kind := domain.EPass
    edges := []*Edge{&Edge{Direction: d.(directions.Direction), Edge: kind}}
    for _, ed := range toAnySlice(edi) {
        switch v := ed.(type) {
        case directions.Direction:
            edges = append(edges, &Edge{Direction: v, Edge: kind})
        default:
            panic(fmt.Errorf("unexpected type %T", v))
        }
    }
    return edges, nil
}

RiverEdges <- "River" SP+ d:DIRECTION edi:SpaceDirection* {
    kind := domain.ERiver
    edges := []*Edge{&Edge{Direction: d.(directions.Direction), Edge: kind}}
    for _, ed := range toAnySlice(edi) {
        switch v := ed.(type) {
        case directions.Direction:
            edges = append(edges, &Edge{Direction: v, Edge: kind})
        default:
            panic(fmt.Errorf("unexpected type %T", v))
        }
    }
    return edges, nil
}

CommaDirection <- "," _ d:DIRECTION {
    return d, nil
}

SpaceDirection <- SP+ d:DIRECTION {
    return d, nil
}

Resource <- "Coal" {
    return domain.RCoal, nil
} / "Iron Ore" {
    return domain.RIronOre, nil
}

Settlement <- [A-Z] [A-Za-z' ]+ {
    return &Settlement{Name: strings.TrimSpace(string(c.text))}, nil
}

DIRECTION <- "NE" {
    return directions.DNorthEast, nil
} / "SE" {
    return directions.DSouthEast, nil
} / "SW" {
    return directions.DSouthWest, nil
} / "NW" {
    return directions.DNorthWest, nil
} / "N" {
    return directions.DNorth, nil
} / "S" {
    return directions.DSouth, nil
}


TERRAIN <- "CONIFER HILLS" {
    return domain.TConiferHills, nil
} / "GRASSY HILLS" {
    return domain.TGrassyHills, nil
} / "PRAIRIE" {
    return domain.TPrairie, nil
} / "ROCKY HILLS" {
    return domain.TRockyHills, nil
} / "SWAMP" {
    return domain.TSwamp, nil
} / "LAKE" {
    return domain.TLake, nil
} / "OCEAN" {
    return domain.TOcean, nil
} / "CH" {
    return domain.TConiferHills, nil
} / "GH" {
    return domain.TGrassyHills, nil
} / "PR" {
    return domain.TPrairie, nil
} / "RH" {
    return domain.TRockyHills, nil
} / "SW" {
    return domain.TSwamp, nil
} / "L" {
    return domain.TLake, nil
} / "O" {
    return domain.TOcean, nil
}

UNIT_ID <- DIGIT DIGIT DIGIT DIGIT ([cefg] DIGIT)? {
    return string(c.text), nil
}

EOF    = !.
DIGIT  = [0-9]
LETTER = [A-Z]
ALPHA  = [A-Za-z]
SP     = [ \t]
_      = [ \t]*
