{
// Package headers implements a Pigeon parser for section headers.
package headers

import (
    "bytes"
    "strings"
)

type Header struct {
    ClanId  string
    CurrHex GridHex
    PrevHex GridHex
    Game    Date
    Report  Date
}

type clanLine struct {
    id      string
    currHex GridHex
    prevHex GridHex
}

type GridHex struct {
    Grid   string
    Column string
    Row    string
}

type turnLine struct {
    gameDate   Date
    reportDate Date
}

type Date struct {
    Year  string
    Month string
    Day   string
}

}

TurnReportHeader <- cl:ClanLine EOL tl:TurnLine EOL {
    clan := cl.(clanLine)
    turn := tl.(turnLine)
    return Header{
        ClanId:  clan.id,
        CurrHex: clan.currHex,
        PrevHex: clan.prevHex,
        Game:    turn.gameDate,
        Report:  turn.reportDate,
    }, nil
}

ClanLine <- "Tribe" _ id:ClanId "," _ "," _ "Current Hex =" _ ch:GridHexNo "," _ "(Previous Hex =" _ ph:GridHexNo ")" {
    return clanLine {
        id:      id.(string),
        currHex: ch.(GridHex),
        prevHex: ph.(GridHex),
    }, nil
}

ClanId <- "0" DIGIT DIGIT DIGIT {
    return string(c.text), nil
}

GridHexNo <- gid:Grid SP col:Column row:Row {
    return GridHex{
        Grid:   gid.(string),
        Column: col.(string),
        Row:    row.(string),
    }, nil
}

Grid <- "##" {
    return string(c.text), nil
} / LETTER LETTER {
    return string(c.text), nil
}

Column <- DIGIT DIGIT {
    return string(c.text), nil
}

Row <- DIGIT DIGIT {
    return string(c.text), nil
}

TurnLine <- "Current Turn" _ gd:GameYearMonth _ GameMonth "," _ Season _ "," _ Weather _ "Next Turn" _ GameYearMonth _ GameMonth "," _ rd:ReportDate {
    return turnLine{
        gameDate:   gd.(Date),
        reportDate: rd.(Date),
    }, nil
}

GameYearMonth <- DIGIT DIGIT DIGIT "-" DIGIT DIGIT {
    fields := bytes.Split(c.text, []byte{'-'})
    year, month := string(fields[0]), string(fields[1])
    return Date{
        Year:  year,
        Month: month,
    }, nil
}

GameMonth <- "(#" DIGIT DIGIT? ")" {
    return string(c.text), nil
}

Season <- LETTER+ {
    return string(c.text), nil
}

Weather <- LETTER+ {
    return string(c.text), nil
}

ReportDate <- DIGIT  DIGIT "/" DIGIT DIGIT "/" DIGIT DIGIT DIGIT DIGIT {
    fields := bytes.Split(c.text, []byte{'/'})
    day, month, year := string(fields[0]), string(fields[1]), string(fields[2])
    return Date{
        Year:  year,
        Month: month,
        Day:   day,
    }, nil
}

EOL = "\n"
DIGIT = [0-9]
LETTER = [A-Za-z]
SP = " "
_ = [ \t]*