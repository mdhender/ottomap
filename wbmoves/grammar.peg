{
package wbmoves

import (
	"log"
	"github.com/mdhender/ottomap/internal/direction"
	"github.com/mdhender/ottomap/internal/winds"
)

func toAnySlice(v any) []any {
    if v == nil {
        return nil
    }
    return v.([]any)
}

}

Line <- UnitLocation EOF {
    return true, nil
}

// Tribe 0138, , Current Hex = ## 0709, (Previous Hex = ## 0709)
UnitLocation <- "Tribe" SP UnitID "," SP "," SP "Current Hex" SP "=" SP ch:Hex "," SP "(Previous Hex" SP "=" SP ph:Hex ")" _ EOF {

}

Hex <- "N/A" {
    return string(c.text), nil
} / "##" SP DIGIT DIGIT DIGIT DIGIT {
    return string(c.text), nil
} / LETTER LETTER SP DIGIT DIGIT DIGIT DIGIT
    return string(c.text), nil
}

FleetMovement <- "Fleet Movement:" SP Step* _ EOF {
    var fm Results_t
    fm.Winds = &Winds_t{
        //Strength: w.(winds.Strength_e),
        //From: d.(direction.Direction_e),
    }
    return &fm, nil
}

Step <- StartStep "(" _ ")" _ "(" _ ")" {
    return true, nil
}

StartStep <- "Move" SP {
    return true, nil
} / "\\" {
    return true, nil
}

SightLand <- "Sight" SP "Land" SP "-" {
    return Land, nil
}

SightWater <- "Sight" SP "Water" SP "-" {
    return Water, nil
}

CompassPoint <- "NE/NE" {
    return []direction.Direction_e{direction.NorthEast, direction.NorthEast}, nil
} / "NE/SE" {
    return []direction.Direction_e{direction.NorthEast, direction.SouthEast}, nil
} / "NW/NW" {
    return []direction.Direction_e{direction.NorthWest, direction.NorthWest}, nil
} / "SE/SE" {
    return []direction.Direction_e{direction.SouthEast, direction.SouthEast}, nil
} / "SW/NW" {
    return []direction.Direction_e{direction.SouthWest, direction.NorthWest}, nil
} / "SW/SW" {
    return []direction.Direction_e{direction.SouthWest, direction.SouthWest}, nil
} / "N/NE" {
    return []direction.Direction_e{direction.North, direction.NorthEast}, nil
} / "N/NW" {
    return []direction.Direction_e{direction.North, direction.NorthWest}, nil
} / "N/N" {
    return []direction.Direction_e{direction.North, direction.North}, nil
} / "S/SE" {
    return []direction.Direction_e{direction.South, direction.SouthEast}, nil
} / "S/SW" {
    return []direction.Direction_e{direction.South, direction.SouthWest}, nil
} / "S/S" {
    return []direction.Direction_e{direction.South, direction.South}, nil
}


DIRECTION <- "NE" {
    return direction.NorthEast, nil
} / "SE" {
    return direction.SouthEast, nil
} / "SW" {
    return direction.SouthWest, nil
} / "NW" {
    return direction.NorthWest, nil
} / "N" {
    return direction.North, nil
} / "S" {
    return direction.South, nil
}

WIND <- "CALM" {
    return winds.Calm, nil
} / "MILD" {
    return winds.Mild, nil
} / "STRONG" {
    return winds.Strong, nil
} / "GALE" {
    return winds.Gale, nil
}

SP     = [ \t]+
_      = [ \t]*
